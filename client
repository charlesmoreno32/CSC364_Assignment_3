#!/usr/bin/env python3

import socket
import sys
import traceback
from threading import Thread
import struct
import select
import tty
import termios
import time

def handle_server(received_packet):
    i = 1

def main():
    global inp, last_time, user
    argc = len(sys.argv)
    if(argc == 4):
        host = sys.argv[1]
        port = int(sys.argv[2])
        user = sys.argv[3]
        addr = (host, port)
    else:
        print("Error. Proper usage: ./client [host] [port] [username]\n")
        return 1
    

    soc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    with open("gistfile1.txt", "rb") as file:
        file_data = file.read()

    chunks = []
    for i in range(0, len(file_data), 1024):
        chunks.append(file_data[i:i + 1024])

    while True:
        # Use select to wait for input on both the socket and stdin
        read_sockets, _, _ = select.select([sys.stdin, soc], [], [])
        for sock in read_sockets:
            if sock == soc:
                received_packet, addr = sock.recvfrom(1024)
                if not received_packet:
                    print("Disconnected from server")
                    return
                    
                feedback = handle_server(received_packet)
                if(feedback == 1):
                    exit(1)

            elif sock == sys.stdin:
                char = sys.stdin.read(1)
                if char:
                    i = 0
if __name__ == "__main__":
    main()