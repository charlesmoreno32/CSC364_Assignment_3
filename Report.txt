The base of my client main code is a while loop that continuously send over chunks to
the server until the whole file is sent.
I begin this loop by trying to send all of the packets that are currently in the window.
After that is done, I have a separate loop that is for the length of the window. 
I start this loop by waiting to receive an ACK from the server.
In the loop is where I implement slow start, by checking the cwnd each time a ACK is received
and if cwnd < sshtresh, then I increment cwnd.
After that, I implement the 3x duplicate fast retramsitting by checking  if the received ACK matches
the last one. If so, I increment the amount of duplicates, and if that equals 3, I retransmit and reset
the duplicate count. I also set the ssthresh to cwnd // 2.
At the end of this loop, I make sure to update and slide the window.
After the loop is where I implemented congestion avoidance by incrementing the cwnd because after the
loop is when the RTT is received by the client.

Like I previously metioned, duplicate retransmission were handled by setting ssthresh to cwnd // 2,
and retransmit the packet after received 3 duplicated Acks.
Once a timeout happened on the client side, the program catches the socket timeout and notifies
the client that there was a timeout and retramsits the packet at the beginning of the window
while also resetting ssthresh to cwnd // 2 and cwnd to 1. 


At first, I used RTT # and seconds so the two graphs didn't really show any matching patterns,
so I changed the Retransmissions vs Time to also use RTT #. I observed that the more lost packages
there were, the more variaty there was in the cwnd size as well as it took more RTT's to completely
send the file. My 1% was the most readable; it followed my expectations by the cwnd growing exponentially
at first until it reach an sstresh. It then grew linearly until a timeout occured, resetting the cwnd
back to zero. From there, it started to grow exponentially again until reaching the ssthresh, where it
begins to grow linearly.

One of the main challenges I faced was not knowing if my implementation was completely correct
due to not really having a reference/right answer to compare to. It's the process that matters,
not the results. I had some confusion dealing with the RTT and how to graph them, but I think I
was able to resolve them adequately. This project didn't really teach anything new, it just really
refined what I was learning in class so now I can envision the whole picture due to implementing it.
Another things was that I was confused with how RTT and ssthresh were to be implemented with timeouts and
retransmissions; it took me a couple times to get it right.