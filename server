#!/usr/bin/env python3

import socket
import sys
import traceback
from threading import Thread
import struct
import select
import time

#Server receives a message then sleep for 100 ms

# Create a message with a specified type and data (remember to encrypt w/ utf-8 before sending)
def send_message(soc, server_address, message_type, data=b''):
    message = struct.pack('!I', message_type) + data
    soc.sendto(message, server_address)

def check_times(conn, addr):
    while True:
        # Wait for two minutes before checking times
        time.sleep(120)
        current_time = time.time()
        addr_to_username_cpy = addr_to_username.copy()
        for addr in addr_to_username_cpy: 
            username = addr_to_username[addr][0]
            last_time = addr_to_username[addr][1]
            # Check if the timestamp is more than two minutes old
            if current_time - last_time > 120:
                print(f"User {username} has timed out.")

                if username:
                    # Remove user from all channels
                    for channel in users[username]:
                        channels[channel].remove(username)
                        if channels[channel] == []:
                            del channels[channel]
                    del users[username]
                    del addr_to_username[addr]
                    del username_to_addr[username]
                    print(f"User {username} logged out.")
                send_message(conn, addr, ERROR, "User logged out.".ljust(64, '\0').encode('utf-8'))

def handle_client(conn, received_packet, addr):
    print("New packet from", addr)
    if not received_packet:
        return

    try:
        message = received_packet.decode('utf-8')
        print(f"Received from {addr}: {message}")

        message_type = struct.unpack('!I', received_packet[:4])[0]
    except:
            print("Received malformed packet.")
            return

    if message_type == LOGIN_REQUEST:
        try:
            data = received_packet[4:]
            username = struct.unpack('!32s', data[:32])[0].decode('utf-8')
            if username not in users:
                users[username] = []
                addr_to_username[addr] = [username, time.time()]
                username_to_addr[username] = addr
                print(f"User {username} logged in")
            else:
                send_message(conn, addr, ERROR, "Error: Username already taken. Please reconnect with different.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return
    elif(message_type == LOGOUT_REQUEST):
        try:
            username = addr_to_username.get(addr, None)[0]
            if username:
                # Remove user from all channels
                for channel in users[username]:
                    channels[channel].remove(username)
                    if channels[channel] == []:
                        del channels[channel]
                del users[username]
                del addr_to_username[addr]
                del username_to_addr[username]
                print(f"User {username} logged out.")
                send_message(conn, addr, ERROR, "User logged out.".ljust(64, '\0').encode('utf-8'))
        except KeyError:
                send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return
    elif(message_type == JOIN_REQUEST):
        try:
            data = received_packet[4:]
            channel = struct.unpack('!32s', data[:32])[0].decode('utf-8').rstrip('\0')
            username = addr_to_username[addr][0]
            addr_to_username[addr][1] = time.time()

            # If user is first to join channel, create channel
            if channel not in channels:
                    channels[channel] = []

            if username and not channel in users[username]:
                users[username].append(channel)
                channels[channel].append(username)
                print(f"User {username} joined channel {channel}.")
            else:
                send_message(conn, addr, ERROR, "Error: User already part of channel.".ljust(64, '\0').encode('utf-8'))
        except KeyError:
                send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return

    elif(message_type == LEAVE_REQUEST):
        try:
            data = received_packet[4:]
            username = addr_to_username[addr][0]
            addr_to_username[addr][1] = time.time()

            channel = struct.unpack('!32s', data[:32])[0].decode('utf-8').rstrip('\0')

            if username in users and channel in users[username]:
                users[username].remove(channel)
                channels[channel].remove(username)
                if channels[channel] == []:
                    del channels[channel]
                print(f"User {username} left channel {channel}")
            else:
                send_message(conn, addr, ERROR, f"Error: User {username} is not a part of channel {channel}.".ljust(64, '\0').encode('utf-8'))
        except KeyError:
                send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return
    elif(message_type == SAY_REQUEST):
        try:
            data = received_packet[4:]
            channel = struct.unpack('!32s', data[:32])[0].decode('utf-8').rstrip('\0')
            message = struct.unpack('!64s', data[32:96])[0].decode('utf-8').rstrip('\0')
            username = addr_to_username[addr][0]
            addr_to_username[addr][1] = time.time()
            if username in users and channel in users[username]:
                broadcast = channel.ljust(32, '\0').encode('utf-8') + username.ljust(32, '\0').encode('utf-8') + message.ljust(64, '\0').encode('utf-8')
                # Broadcast to all users in the channel
                for user in channels[channel]:
                    user_addr = username_to_addr[user]
                    send_message(conn, user_addr, SAY, broadcast)
            
            else:
                send_message(conn, addr, ERROR, f"Error: User {username} is not a part of channel {channel}.".ljust(64, '\0').encode('utf-8'))
        except KeyError:
                send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return
    elif(message_type == LIST_REQUEST):
        try:
            data = received_packet[4:]
            username = addr_to_username[addr][0]
            addr_to_username[addr][1] = time.time()

            count = 0
            for ch in channels:
                count += 1

            list_channels = struct.pack('!32s', str(count).ljust(32, '\0').encode('utf-8'))

            for ch in channels:
                list_channels += struct.pack('!32s', ch.ljust(32, '\0').encode('utf-8'))
            print(f"Completed {username}'s LIST request")
            send_message(conn, addr, LIST, list_channels)
        except KeyError:
                send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return
    elif(message_type == WHO_REQUEST):
        try:
            data = received_packet[4:]
            channel = struct.unpack('!32s', data[:32])[0].decode('utf-8').rstrip('\0')
            username = addr_to_username[addr][0]
            addr_to_username[addr][1] = time.time()

            count = 0
            for user in channels[channel]:
                count += 1

            users_msg = struct.pack('!32s', str(count).ljust(32, '\0').encode('utf-8'))
            users_msg += struct.pack('!32s', channel.ljust(32, '\0').encode('utf-8'))
            if channel in channels:
                for user in channels[channel]:
                    users_msg += struct.pack('!32s', user.ljust(32, '\0').encode('utf-8'))


                print(f"Completed {username}'s WHO request")
                send_message(conn, addr, WHO, users_msg)
            else:
                send_message(conn, addr, ERROR, "Error: Channel does not exist.".ljust(64, '\0').encode('utf-8'))
        except KeyError:
                send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))
        except:
            print("Received malformed packet.")
            return
    elif(message_type == ALIVE_REQUEST):
        try:
            addr_to_username[addr][1] = time.time()
            print(f"{addr} sent a keep alive request.")
        except KeyError:
            send_message(conn, addr, ERROR, "Error: User not logged in.".ljust(64, '\0').encode('utf-8'))

def main():
    argc = len(sys.argv)
    if(argc == 3):
        host = sys.argv[1]
        port = int(sys.argv[2])
        addr = (host, port)
    else:
        print("Error. Proper usage: ./client [host] [port] [username]\n")
        return 1
    
    # Create a UDP ocket for the server
    try:
        soc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        soc.bind((host, port))
    except socket.error as e:
        print(f"Socket error: {e}")
        return
    
    print("Server listening on ", host, port)

    try:
        client_thread = Thread(target=check_times, args=(soc, addr))
        client_thread.start()
    except:
        print("Thread did not start.")
        traceback.print_exc()

    # Continuously process incoming packets.
    while True:
        read_sockets, _, _ = select.select([soc], [], [])
        for conn in read_sockets:
            if conn is soc:
                received_packet, addr = conn.recvfrom(1024)
                if(received_packet):
                    handle_client(conn, received_packet, addr)
        


if __name__ == "__main__":
    main()